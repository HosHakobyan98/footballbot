require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const Membership = require('./membership');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const membership = new Membership(process.env.SPONSORS);

const allQuestions=require('./questions')

const userStates = {};


bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, "‚öΩ ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø ’ñ’∏÷Ç’ø’¢’∏’¨’°’µ’´’∂ ’é’´’Ø’ø’∏÷Ä’´’∂’°÷â\n\n’ç’•’≤’¥’´÷Ä ’∂’•÷Ä÷Ñ÷á’´ ’Ø’∏’≥’°’Ø’® ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â", {
        reply_markup: {
            inline_keyboard: [
                [{ text: "‚úÖ ’ç’Ø’Ω’•’¨ ’é’´’Ø’ø’∏÷Ä’´’∂’°’∂", callback_data: "start_quiz" }],
            ],
        },
    });
});

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'start_quiz') {
        const isSubscribed = await membership.verify(bot, chatId);
        if (!isSubscribed) {
            const links = membership.getSponsorsList().map(link => `üîó https://t.me/${link}`).join('\n');
            return bot.sendMessage(
                chatId,
                `‚ùó ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¢’°’™’°’∂’∏÷Ä’§’°’£÷Ä’æ’•’¨ ’∞’∏’æ’°’∂’°’æ’∏÷Ä ’°’¨’´÷Ñ’∂’•÷Ä’´’∂‚Ä§\n\n${links}\n\nüì≤ ‘≤’°’™’°’∂’∏÷Ä’§’°’£÷Ä’æ’•’¨’∏÷Ç÷Å ’∞’•’ø’∏ ’Ω’•’≤’¥’´÷Ä ¬´üîÑ ’ç’ø’∏÷Ç’£’•’¨ ’¢’°’™’°’∂’∏÷Ä’§’°’£÷Ä’∏÷Ç’¥’®¬ª ’Ø’∏’≥’°’Ø’®÷â`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "üîÑ ’ç’ø’∏÷Ç’£’•’¨ ’¢’°’™’°’∂’∏÷Ä’§’°’£÷Ä’∏÷Ç’¥’®", callback_data: 'check_subscription' }],
                        ],
                    }
                }
            );
        }
        startQuiz(chatId);
        return;
    }
    if (data === 'check_subscription') {
        const isSubscribed = await membership.verify(bot, chatId);
        if (!isSubscribed) {
            return bot.answerCallbackQuery(callbackQuery.id, {
                text: "‚ùå ‘¥’•’º ’¢’°’™’°’∂’∏÷Ä’§’°’£÷Ä’æ’°’Æ ’π’•’Ω÷â",
                show_alert: true
            });
        }
        startQuiz(chatId);
        return;
    }
    if (data === 'try_again') {
        startQuiz(chatId);
        return;
    }

    if (!userStates[chatId]) return;
    const state = userStates[chatId];

    if (data === 'continue') {
        state.finished = false;
        sendNextQuestion(chatId);
        return;
    }

    if (data === 'stop') {
        bot.sendMessage(chatId, 'üèÅ ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ’æ’´’Ø’ø’∏÷Ä’´’∂’°’µ’´ ’∞’°’¥’°÷Ä÷â');
        delete userStates[chatId];
        return;
    }

    if (state.finished) return;

    const selected = parseInt(data);
    const question = allQuestions[state.current];
    const correctIndex = question.ans;

    const newKeyboard = question.opts.map((opt, i) => {
        let prefix = '';
        if (i === correctIndex) prefix = '‚úÖ ';
        else if (i === selected) prefix = '‚ùå ';
        return [{ text: `${prefix}${opt}`, callback_data: 'ignore' }];
    });

    await bot.editMessageReplyMarkup(
        { inline_keyboard: newKeyboard },
        { chat_id: chatId, message_id: callbackQuery.message.message_id }
    );

    if (selected === correctIndex) {
        state.score++;
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ ’É’´’∑’ø ’ß!' });
    } else {
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: `‚ùå ’ç’≠’°’¨÷â ’É’´’∑’ø ’∫’°’ø’°’Ω’≠’°’∂’®’ù ${question.opts[correctIndex]}`,
        });
    }

    state.current++;

    if (state.current >= allQuestions.length) {
        const score = state.score;
        const total = state.current;

        let title = 'üìò ’ç’Ø’Ω’∂’°’Ø';

        if (score >= 5 && score <= 9) {
            title = 'üìó’ë’°’Æ÷Ä ’¥’°’Ø’°÷Ä’§’°’Ø ';
        } else if (score >= 10 && score <= 14) {
            title = 'üìô’Ä’•’ø’°÷Ñ÷Ä÷Ñ÷Ä’æ’°’Æ ÷Ü’∏÷Ç’ø’¢’∏’¨’°’Ω÷Ä’•÷Ä ';
        } else if (score >= 15 && score <= 19) {
            title = 'üìï ’Ñ’´’ª’´’∂ ’¥’°’Ø’°÷Ä’§’°’Ø';
        } else if (score >= 20 && score <= 24) {
            title = 'üéØ ‘±’∂’π’°÷É ’ø’•’≤’•’Ø’°÷Å’æ’°’Æ';
        } else if (score >= 25 && score < total) {
            title = 'ü•á ‘≥’´’ø’°’Ø';
        } else if (score === total) {
            title = 'üèÜ ’é’°÷Ä’∫’•’ø';
        }

        bot.sendMessage(
            chatId,
            `üèÅ ’é’´’Ø’ø’∏÷Ä’´’∂’°’∂ ’°’æ’°÷Ä’ø’æ’•÷Å÷â\n\nüìä ‘±÷Ä’§’µ’∏÷Ç’∂÷Ñ’ù ${score}/${total} ’≥’´’∑’ø ’∫’°’ø’°’Ω’≠’°’∂\nüìå ‘ø’°÷Ä’£’°’æ’´’≥’°’Ø’§’ù ${title}\n\nüìö ’Ñ’•÷Ä ’∞’°÷Ä÷Å’•÷Ä’® ’∫’°÷Ä’¢’•÷Ä’°’¢’°÷Ä ’©’°÷Ä’¥’°÷Å’æ’∏÷Ç’¥ ’•’∂÷â`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "üîÅ ‘Ω’°’≤’°’¨ ’Ø÷Ä’Ø’´’∂", callback_data: 'try_again' }]
                    ]
                }
            }
        );
        delete userStates[chatId];
        return;
    } else {
        setTimeout(() => sendNextQuestion(chatId), 2000);
    }
});

function startQuiz(chatId) {
    userStates[chatId] = {
        score: 0,
        current: 0,
        finished: false,
    };
    // bot.sendMessage(chatId, "üì¢ ’ç’Ø’Ω’∏÷Ç’¥ ’•’∂÷Ñ ’æ’´’Ø’ø’∏÷Ä’´’∂’°’∂÷â ’ä’°’ø÷Ä’°’Ω’ø ’•’≤’´÷Ä÷â");
    sendNextQuestion(chatId);
}

function sendNextQuestion(chatId) {
    const state = userStates[chatId];
    const question = allQuestions[state.current];

    if (!question) {
        bot.sendMessage(chatId, '‚úÖ ’Ñ’•÷Ä ’∞’°÷Ä÷Å’•÷Ä’® ’™’°’¥’°’∂’°’Ø’°’æ’∏÷Ä’°’∫’•’Ω ’°’æ’°÷Ä’ø’æ’•’¨ ’•’∂÷â ’á’∏÷Ç’ø’∏’æ ’°’æ’•’¨’°÷Å’æ’•’¨’∏÷Ç ’•’∂÷â');
        delete userStates[chatId];
        return;
    }
    const opts = {
        reply_markup: {
            inline_keyboard: question.opts.map((opt, i) => [
                { text: opt, callback_data: i.toString() }
            ])
        }
    };
    bot.sendMessage(chatId, `‚ùì ’Ä’°÷Ä÷Å ${state.current + 1}‚Ä§\n${question.q}`, opts);
}
